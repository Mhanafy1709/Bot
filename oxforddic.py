import requests
import json


def getDefinitions(word_id):
    word_id_lower = word_id.lower().strip()
    if not word_id_lower or ' ' in word_id_lower:  # –≠—Ç–æ—Ç API –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        print(f"API dictionaryapi.dev –æ–∂–∏–¥–∞–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ. –ü–æ–ª—É—á–µ–Ω–æ: '{word_id_lower}'")
        return False

    url = f"https://api.dictionaryapi.dev/api/v2/entries/en/{word_id_lower}"

    try:
        r = requests.get(url)
        r.raise_for_status()
        res = r.json()
    except requests.exceptions.HTTPError as e:
        print(f"HTTP –æ—à–∏–±–∫–∞ –¥–ª—è '{word_id}': {e}")
        try:
            error_data = r.json()
            if isinstance(error_data, dict) and "title" in error_data:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç API: {error_data['title']}")
        except json.JSONDecodeError:
            pass  # –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ –∫–∞–∫ JSON
        return False
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è '{word_id}': {e}")
        return False
    except json.JSONDecodeError:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è '{word_id}'. –û—Ç–≤–µ—Ç: {r.text[:200]}")
        return False

    if isinstance(res, dict) and "title" in res:  # –ù–∞–ø—Ä–∏–º–µ—Ä, "No Definitions Found"
        print(f"API —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è '{word_id}': {res['title']}")
        return False

    if not isinstance(res, list) or not res:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{word_id}'. –û—Ç–≤–µ—Ç: {str(res)[:200]}")
        return False

    output = {}
    all_definitions = []
    all_synonyms = []
    audio_url = None

    entry = res[0]

    if entry.get("meanings"):
        for meaning in entry["meanings"]:
            part_of_speech = f"({meaning.get('partOfSpeech', '')}) " if meaning.get('partOfSpeech') else ""
            if meaning.get("definitions"):
                for i, definition_item in enumerate(meaning.get("definitions", [])):
                    if definition_item.get("definition"):
                        all_definitions.append(f"üëâüèª {part_of_speech}{definition_item['definition']}")
                    # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
                    if definition_item.get("synonyms"):
                        for syn in definition_item["synonyms"]:
                            if syn not in all_synonyms:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                all_synonyms.append(syn)
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —á–∞—Å—Ç–∏ —Ä–µ—á–∏ (–±–æ–ª–µ–µ –æ–±—â–∏–µ)
            if meaning.get("synonyms"):
                for syn in meaning["synonyms"]:
                    if syn not in all_synonyms:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                        all_synonyms.append(syn)

    if all_definitions:
        output['definitions'] = '\n'.join(all_definitions)

    if all_synonyms:
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
        output['synonyms'] = ", ".join(list(dict.fromkeys(all_synonyms))[:10])  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –¥–æ 10 —à—Ç—É–∫

    if entry.get("phonetics"):
        for phonetic_info in entry["phonetics"]:
            if phonetic_info.get("audio") and phonetic_info["audio"].strip():
                audio_url = phonetic_info["audio"]
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∞—É–¥–∏–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤,
                # –∑–¥–µ—Å—å –º—ã –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∞—É–¥–∏–æ.
                if "opus" not in audio_url:  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º mp3 –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±–æ—Ä, opus –Ω–µ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    output['audio'] = audio_url
                    break
                elif not output.get('audio'):  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–≤–æ–∏–ª–∏, –±–µ—Ä–µ–º opus
                    output['audio'] = audio_url
            if output.get('audio') and "opus" not in output.get('audio', ''):  # –ï—Å–ª–∏ —É–∂–µ –Ω–∞—à–ª–∏ –Ω–µ-opus, –≤—ã—Ö–æ–¥–∏–º
                break

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –Ω–æ —Å–ª–æ–≤–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–µ—Ç–∏–∫–∞ –±–µ–∑ –∞—É–¥–∏–æ)
    if not output:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–ª–æ–≤–æ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω–∞–π–¥–µ–Ω–æ (res[0] —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if entry.get("word"):
            # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —á—Ç–æ-—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–ª–∏ –≤—Å–µ –∂–µ False
            # print(f"–î–ª—è —Å–ª–æ–≤–∞ '{entry.get('word')}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, —Å–∏–Ω–æ–Ω–∏–º–æ–≤, –∞—É–¥–∏–æ).")
            return False  # –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–ø–æ–ª–Ω—ã–π
        return False

    return output if output else False


if __name__ == "__main__":
    from pprint import pprint

    print("--- –¢–µ—Å—Ç –¥–ª—è 'hello' ---")
    pprint(getDefinitions('hello'))
    print("\n--- –¢–µ—Å—Ç –¥–ª—è 'happy' (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã) ---")
    pprint(getDefinitions('happy'))
    print("\n--- –¢–µ—Å—Ç –¥–ª—è 'great britain' (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è) ---")
    pprint(getDefinitions('great britain'))
    print("\n--- –¢–µ—Å—Ç –¥–ª—è 'nonexistentwordxyz' ---")
    pprint(getDefinitions('nonexistentwordxyz'))
    print("\n--- –¢–µ—Å—Ç –¥–ª—è —Å–ª–æ–≤–∞ 'apple' ---")
    pprint(getDefinitions('apple'))

