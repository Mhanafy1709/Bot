import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª oxforddic.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
# –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getDefinitions
from oxforddic import getDefinitions
from googletrans import Translator

translator = Translator()

# –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
API_TOKEN = '7834569712:AAHykrUVVzGbW_kPmQ61dhs3c8ZPVB3TeXE'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize FSM storage
storage = MemoryStorage()

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —è–∑—ã–∫–æ–≤ (–∫–æ–¥: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏)
AVAILABLE_LANGUAGES = {
    "en": "üá¨üáß English",
    "uz": "üá∫üáø O'zbekcha",
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
}
DEFAULT_PRIMARY_LANG = "en"
DEFAULT_TARGET_LANG = "uz"


# States for language selection
class LanguageSetup(StatesGroup):
    choosing_primary_lang = State()
    choosing_target_lang = State()


# Helper function to get user languages
async def get_user_languages(user_id: int, state: FSMContext):
    user_data = await state.get_data()
    primary_lang = user_data.get(f"user_{user_id}_primary_lang", DEFAULT_PRIMARY_LANG)
    target_lang = user_data.get(f"user_{user_id}_target_lang", DEFAULT_TARGET_LANG)
    return primary_lang, target_lang


# Helper function to create language keyboard
def create_language_keyboard(exclude_lang_code: str = None):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for code, name in AVAILABLE_LANGUAGES.items():
        if code != exclude_lang_code:
            keyboard.add(InlineKeyboardButton(name, callback_data=f"lang_{code}"))
    return keyboard


@dp.message_handler(commands=['start'], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    user_name = message.from_user.first_name
    await message.reply(
        f"Salom, {user_name}! Men English Word Bot!\n"
        "Sizga so'zlarni o'rganishda va iboralarni tarjima qilishda yordam beraman!\n\n"
        "Iltimos, asosiy tilingizni tanlang (siz yozadigan til):",
        reply_markup=create_language_keyboard()
    )
    await LanguageSetup.choosing_primary_lang.set()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ state
    await state.update_data(current_user_id_for_setup=message.from_user.id)


@dp.callback_query_handler(lambda c: c.data.startswith('lang_'), state=LanguageSetup.choosing_primary_lang)
async def process_primary_language(callback_query: types.CallbackQuery, state: FSMContext):
    primary_lang_code = callback_query.data.split('_')[1]
    user_data = await state.get_data()
    user_id = user_data.get('current_user_id_for_setup', callback_query.from_user.id)

    await state.update_data({f"user_{user_id}_primary_lang": primary_lang_code})

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"Asosiy til '{AVAILABLE_LANGUAGES[primary_lang_code]}' qilib tanlandi.\n"
        "Endi tarjima tilini tanlang (asosiy tilga tarjima qilinadi):",
        reply_markup=create_language_keyboard(exclude_lang_code=primary_lang_code)
    )
    await LanguageSetup.choosing_target_lang.set()


@dp.callback_query_handler(lambda c: c.data.startswith('lang_'), state=LanguageSetup.choosing_target_lang)
async def process_target_language(callback_query: types.CallbackQuery, state: FSMContext):
    target_lang_code = callback_query.data.split('_')[1]
    user_data = await state.get_data()
    user_id = user_data.get('current_user_id_for_setup', callback_query.from_user.id)
    primary_lang_code = user_data.get(f"user_{user_id}_primary_lang", DEFAULT_PRIMARY_LANG)

    await state.update_data({f"user_{user_id}_target_lang": target_lang_code})

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"Til sozlamalari o'rnatildi:\n"
        f"Sizning tilingiz: {AVAILABLE_LANGUAGES[primary_lang_code]}\n"
        f"Tarjima tili: {AVAILABLE_LANGUAGES[target_lang_code]}\n\n"
        "Endi so'z yoki matn yuborishingiz mumkin."
    )
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É


@dp.message_handler(commands=['help'], state="*")
async def cmd_help(message: types.Message):
    await message.reply(
        "Men bilan siz Ingliz tilidagi so'zlarning ma'nolarini, sinonimlarini va ularning talaffuzini o'rganasiz.\n"
        "Biror so'zni yuborsangiz, uning tarjimasi, ma'nosi va (agar mavjud bo'lsa) talaffuzini olasiz.\n"
        "Agar matn yuborsangiz, uni tarjima qilaman.\n"
        "Til sozlamalarini o'zgartirish uchun /start buyrug'ini qayta yuboring."
    )


@dp.message_handler(content_types=types.ContentTypes.TEXT, state="*")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_text(message: types.Message, state: FSMContext):
    user_text = message.text.strip()
    if not user_text:
        await message.reply("Iltimos, biror narsa yozing.")
        return

    primary_lang, target_lang = await get_user_languages(message.from_user.id, state)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞
    is_single_word = ' ' not in user_text

    if not is_single_word:  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ—Ä–∞–∑–∞
        try:
            translated_obj = translator.translate(user_text, src=primary_lang, dest=target_lang)
            await message.reply(f"Tarjima ({primary_lang} -> {target_lang}):\n{translated_obj.text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ—Ä–∞–∑—ã '{user_text}': {e}")
            await message.reply("Matnni tarjima qilishda xatolik yuz berdi.")
    else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
        reply_parts = []
        word_for_lookup_en = None  # –°–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è —Å–ª–æ–≤–∞—Ä—è

        # 1. –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–æ–≤–æ
        try:
            translated_obj = translator.translate(user_text, src=primary_lang, dest=target_lang)
            reply_parts.append(f"üìñ So'z: {user_text.capitalize()} ({primary_lang})")
            reply_parts.append(f"üîÑ Tarjimasi ({target_lang}): {translated_obj.text.capitalize()}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ '{user_text}': {e}")
            await message.reply(f"'{user_text}' so'zini tarjima qilishda xatolik.")
            return

        # 2. –ì–æ—Ç–æ–≤–∏–º —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
        if primary_lang == 'en':
            word_for_lookup_en = user_text
        else:
            try:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
                en_translation_obj = translator.translate(user_text, src=primary_lang, dest='en')
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - –æ–¥–Ω–æ —Å–ª–æ–≤–æ
                if ' ' not in en_translation_obj.text.strip():
                    word_for_lookup_en = en_translation_obj.text
                else:
                    logging.info(
                        f"–°–ª–æ–≤–æ '{user_text}' ({primary_lang}) –ø–µ—Ä–µ–≤–µ–ª–æ—Å—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ —Ñ—Ä–∞–∑–∞: '{en_translation_obj.text}'. –ü—Ä–æ–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ '{user_text}' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Å–ª–æ–≤–∞—Ä—è: {e}")

        lookup_result = None
        if word_for_lookup_en:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –¥–ª—è –∫–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
            if word_for_lookup_en.lower() != user_text.lower():
                reply_parts.append(f"\n‚ÑπÔ∏è Quyidagi ma'lumotlar '{word_for_lookup_en.capitalize()}' (en) so'zi uchun:")

            lookup_result = getDefinitions(word_for_lookup_en)  # –§—É–Ω–∫—Ü–∏—è –∏–∑ oxforddic.py

        if lookup_result:
            if lookup_result.get('definitions'):
                reply_parts.append(f"\nüìö Ma'nolari:\n{lookup_result['definitions']}")
            if lookup_result.get('synonyms'):
                reply_parts.append(f"\nü§ù Sinonimlari:\n{lookup_result['synonyms']}")
        elif word_for_lookup_en:  # –ï—Å–ª–∏ –∏—Å–∫–∞–ª–∏, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏
            reply_parts.append("\nüòî Afsuski, bu so'z uchun qo'shimcha ma'lumot (ma'no, sinonim) topilmadi.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        if reply_parts:
            await message.reply("\n".join(reply_parts))
        else:  # –ï—Å–ª–∏ –¥–∞–∂–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è (—Ö–æ—Ç—è –≤—ã—à–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞)
            await message.reply("So'rovni qayta ishlashda xatolik yuz berdi.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if lookup_result and lookup_result.get('audio'):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∞—É–¥–∏–æ –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                audio_url = lookup_result['audio']
                if not audio_url.startswith(('http://', 'https://')):
                    # –ò–Ω–æ–≥–¥–∞ API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
                    # –≠—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ, dictionaryapi.dev –æ–±—ã—á–Ω–æ –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–µ URL
                    if audio_url.startswith("//"):
                        audio_url = "https:" + audio_url
                        # else: # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ –±–∞–∑–æ–≤–æ–≥–æ URL
                    #     logging.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∞—É–¥–∏–æ: {audio_url}")
                    #     audio_url = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

                if audio_url:
                    await bot.send_chat_action(message.chat.id, types.ChatActions.UPLOAD_VOICE)
                    await message.reply_voice(audio_url, caption=f"üé§ Talaffuzi ({word_for_lookup_en.capitalize()})")
            except Exception as e:
                logging.error(
                    f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –¥–ª—è '{word_for_lookup_en}': {e}. URL: {lookup_result.get('audio')}")
                # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
                # await message.reply("Audio talaffuzni yuborishda xatolik yuz berdi.")
        elif lookup_result and not lookup_result.get('audio') and word_for_lookup_en:
            pass  # –£–∂–µ —Å–æ–æ–±—â–∏–ª–∏, —á—Ç–æ –Ω–µ—Ç –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –µ—Å—Ç—å, –Ω–æ –±–µ–∑ –∞—É–¥–∏–æ


if __name__ == '__main__':
    logging.info("Bot ishga tushmoqda...")
    executor.start_polling(dp, skip_updates=True)

